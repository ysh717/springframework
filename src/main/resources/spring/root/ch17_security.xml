<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 인증이 필요없는 요청 경로 설정 -->
	<security:http pattern = "/resources/**" security = "none" />
	
	<!-- 보안 필터 체인 설정 -->
	<security:http>
		<!-- Form 인증 방식 설정 -->
		<security:form-login
			login-page="/ch17/loginForm"
			username-parameter="mid"
			password-parameter="mpassword"
			login-processing-url="/login"
			default-target-url="/ch17/content"
			always-use-default-target="false"
			authentication-failure-url="/ch17/loginForm"/>
			
		<!-- 로그 아웃 설정 -->
		<security:logout
			logout-url="/logout"
			logout-success-url="/ch17/content"/>
			
		<!-- 사이트간 요청 위조 방지 비활성 -->
		<security:csrf disabled ="true"/>
		
		<!-- 요청 URL 권한 설정 -->
		<security:intercept-url pattern="/ch17/admin*" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/ch17/manager*" access="hasRole('ROLE_MANAGER')"/>
		<security:intercept-url pattern="/ch17/user*" access="isAuthenticated()"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 권한 없을 경우 보여줄 페이지 설정 -->
		<security:access-denied-handler error-page="/ch17/error403"/>
	</security:http>
	   <!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) -->
    <security:authentication-manager>
       <security:authentication-provider ref="daoAuthenticationProvider"/>
    </security:authentication-manager>
    
    <!-- 인증 제공자 설정 및 사용자 정보 가져오기 -->
    <bean id="daoAuthenticationProvider"
         class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
       <property name="userDetailsService" ref="jdbcUserService"/>
       <property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
    </bean>
   
    <security:jdbc-user-service 
       id="jdbcUserService"
       data-source-ref="dataSource"
       users-by-username-query="SELECT mid, mpassword, menabled FROM member WHERE mid=?"
       authorities-by-username-query="SELECT mid, mrole FROM member WHERE mid=?"/>
      
    <!-- 권한 계층 설정 -->
    <bean id="roleHierarchyAuthoritiesMapper"
         class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
       <constructor-arg ref="roleHierarchyImpl"/>
    </bean>   
    <bean id="roleHierarchyImpl" 
         class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
       <property name="hierarchy">
          <value>
             ROLE_ADMIN > ROLE_MANAGER
             ROLE_MANAGER > ROLE_USER
          </value>
       </property>
    </bean>   
		
</beans>
